diff --git a/pipewire.conf.in b/pipewire.conf.in
index 3b9f611b7..9508900b0 100644
--- a/pipewire.conf.in
+++ b/pipewire.conf.in
@@ -1,257 +1,236 @@
-# Daemon config file for PipeWire version @VERSION@ #
-#
-# Copy and edit this file in @PIPEWIRE_CONFIG_DIR@ for system-wide changes
-# or in ~/.config/pipewire for local changes.
+context.properties = {
+## Configure properties in the system.
+library.name.system                   = support/libspa-support
+context.data-loop.library.name.system = support/libspa-support
+support.dbus                          = true
+#link.max-buffers                      = 64
+link.max-buffers                       = 16                       # version < 3 clients can't handle more
+#mem.warn-mlock                        = false
+#mem.allow-mlock                       = true
+#mem.mlock-all                         = false
+#clock.power-of-two-quantum            = true
+log.level                             = 2
+#cpu.zero.denormals                    = false
+core.daemon = true              # listening for socket connections
+core.name   = pipewire-0        # core name and socket name
+
+## Properties for the DSP configuration.
+#default.clock.rate          = 48000
+#default.clock.allowed-rates = [ 48000 ]
+#default.clock.quantum       = 1024
+default.clock.min-quantum   = 16
+#default.clock.max-quantum   = 2048
+#default.clock.quantum-limit = 8192
+#default.video.width         = 640
+#default.video.height        = 480
+#default.video.rate.num      = 25
+#default.video.rate.denom    = 1
 #
-# It is also possible to place a file with an updated section in
-# @PIPEWIRE_CONFIG_DIR@/pipewire.conf.d/ for system-wide changes or in
-# ~/.config/pipewire/pipewire.conf.d/ for local changes.
+#settings.check-quantum      = false
+#settings.check-rate         = false
 #
-
-context.properties = {
-    ## Configure properties in the system.
-    #library.name.system                   = support/libspa-support
-    #context.data-loop.library.name.system = support/libspa-support
-    #support.dbus                          = true
-    #link.max-buffers                      = 64
-    link.max-buffers                       = 16                       # version < 3 clients can't handle more
-    #mem.warn-mlock                        = false
-    #mem.allow-mlock                       = true
-    #mem.mlock-all                         = false
-    #clock.power-of-two-quantum            = true
-    #log.level                             = 2
-    #cpu.zero.denormals                    = false
-
-    core.daemon = true              # listening for socket connections
-    core.name   = pipewire-0        # core name and socket name
-
-    ## Properties for the DSP configuration.
-    #default.clock.rate          = 48000
-    #default.clock.allowed-rates = [ 48000 ]
-    #default.clock.quantum       = 1024
-    default.clock.min-quantum   = 16
-    #default.clock.max-quantum   = 2048
-    #default.clock.quantum-limit = 8192
-    #default.video.width         = 640
-    #default.video.height        = 480
-    #default.video.rate.num      = 25
-    #default.video.rate.denom    = 1
-    #
-    #settings.check-quantum      = false
-    #settings.check-rate         = false
-    #
-    # These overrides are only applied when running in a vm.
-    vm.overrides = {
-        default.clock.min-quantum = 1024
-    }
+# These overrides are only applied when running in a vm.
+vm.overrides = {
+    default.clock.min-quantum = 1024
 }
 
+}
 context.spa-libs = {
-    #<factory-name regex> = <library-name>
-    #
-    # Used to find spa factory names. It maps an spa factory name
-    # regular expression to a library name that should contain
-    # that factory.
-    #
-    audio.convert.* = audioconvert/libspa-audioconvert
-    api.alsa.*      = alsa/libspa-alsa
-    api.v4l2.*      = v4l2/libspa-v4l2
-    api.libcamera.* = libcamera/libspa-libcamera
-    api.bluez5.*    = bluez5/libspa-bluez5
-    api.vulkan.*    = vulkan/libspa-vulkan
-    api.jack.*      = jack/libspa-jack
-    support.*       = support/libspa-support
-    #videotestsrc   = videotestsrc/libspa-videotestsrc
-    #audiotestsrc   = audiotestsrc/libspa-audiotestsrc
+#<factory-name regex> = <library-name>
+#
+# Used to find spa factory names. It maps an spa factory name
+# regular expression to a library name that should contain
+# that factory.
+#
+audio.convert.* = audioconvert/libspa-audioconvert
+api.alsa.*      = alsa/libspa-alsa
+api.v4l2.*      = v4l2/libspa-v4l2
+api.libcamera.* = libcamera/libspa-libcamera
+api.bluez5.*    = bluez5/libspa-bluez5
+api.vulkan.*    = vulkan/libspa-vulkan
+api.jack.*      = jack/libspa-jack
+support.*       = support/libspa-support
+#videotestsrc   = videotestsrc/libspa-videotestsrc
+#audiotestsrc   = audiotestsrc/libspa-audiotestsrc
 }
-
 context.modules = [
-    #{ name = <module-name>
-    #    [ args  = { <key> = <value> ... } ]
-    #    [ flags = [ [ ifexists ] [ nofail ] ]
-    #}
-    #
-    # Loads a module with the given parameters.
-    # If ifexists is given, the module is ignored when it is not found.
-    # If nofail is given, module initialization failures are ignored.
-    #
-
-    # Uses realtime scheduling to boost the audio thread priorities. This uses
-    # RTKit if the user doesn't have permission to use regular realtime
-    # scheduling.
-    { name = libpipewire-module-rt
-        args = {
-            nice.level    = -11
-            #rt.prio      = 88
-            #rt.time.soft = -1
-            #rt.time.hard = -1
-        }
-        flags = [ ifexists nofail ]
+#{ name = <module-name>
+#    [ args  = { <key> = <value> ... } ]
+#    [ flags = [ [ ifexists ] [ nofail ] ]
+#}
+#
+# Loads a module with the given parameters.
+# If ifexists is given, the module is ignored when it is not found.
+# If nofail is given, module initialization failures are ignored.
+#
+# Uses realtime scheduling to boost the audio thread priorities. This uses
+# RTKit if the user doesn't have permission to use regular realtime
+# scheduling.
+{ name = libpipewire-module-rt
+    args = {
+        nice.level    = -11
+        #rt.prio      = 88
+        #rt.time.soft = -1
+        #rt.time.hard = -1
     }
+    flags = [ ifexists nofail ]
+}
 
-    # The native communication protocol.
-    { name = libpipewire-module-protocol-native }
-
-    # The profile module. Allows application to access profiler
-    # and performance data. It provides an interface that is used
-    # by pw-top and pw-profiler.
-    { name = libpipewire-module-profiler }
-
-    # Allows applications to create metadata objects. It creates
-    # a factory for Metadata objects.
-    { name = libpipewire-module-metadata }
-
-    # Creates a factory for making devices that run in the
-    # context of the PipeWire server.
-    { name = libpipewire-module-spa-device-factory }
+# The native communication protocol.
+{ name = libpipewire-module-protocol-native }
 
-    # Creates a factory for making nodes that run in the
-    # context of the PipeWire server.
-    { name = libpipewire-module-spa-node-factory }
+# The profile module. Allows application to access profiler
+# and performance data. It provides an interface that is used
+# by pw-top and pw-profiler.
+{ name = libpipewire-module-profiler }
 
-    # Allows creating nodes that run in the context of the
-    # client. Is used by all clients that want to provide
-    # data to PipeWire.
-    { name = libpipewire-module-client-node }
+# Allows applications to create metadata objects. It creates
+# a factory for Metadata objects.
+{ name = libpipewire-module-metadata }
 
-    # Allows creating devices that run in the context of the
-    # client. Is used by the session manager.
-    { name = libpipewire-module-client-device }
+# Creates a factory for making devices that run in the
+# context of the PipeWire server.
+{ name = libpipewire-module-spa-device-factory }
 
-    # The portal module monitors the PID of the portal process
-    # and tags connections with the same PID as portal
-    # connections.
-    { name = libpipewire-module-portal
-        flags = [ ifexists nofail ]
-    }
+# Creates a factory for making nodes that run in the
+# context of the PipeWire server.
+{ name = libpipewire-module-spa-node-factory }
 
-    # The access module can perform access checks and block
-    # new clients.
-    { name = libpipewire-module-access
-        args = {
-            # access.allowed to list an array of paths of allowed
-            # apps.
-            #access.allowed = [
-            #    @session_manager_path@
-            #]
+# Allows creating nodes that run in the context of the
+# client. Is used by all clients that want to provide
+# data to PipeWire.
+{ name = libpipewire-module-client-node }
 
-            # An array of rejected paths.
-            #access.rejected = [ ]
+# Allows creating devices that run in the context of the
+# client. Is used by the session manager.
+{ name = libpipewire-module-client-device }
 
-            # An array of paths with restricted access.
-            #access.restricted = [ ]
+# The portal module monitors the PID of the portal process
+# and tags connections with the same PID as portal
+# connections.
+{ name = libpipewire-module-portal
+    flags = [ ifexists nofail ]
+}
 
-            # Anything not in the above lists gets assigned the
-            # access.force permission.
-            #access.force = flatpak
-        }
+# The access module can perform access checks and block
+# new clients.
+{ name = libpipewire-module-access
+    args = {
+        # access.allowed to list an array of paths of allowed
+        # apps.
+        access.allowed = [
+            /usr/bin/wireplumber
+            /usr/bin/wpctl
+            /usr/bin/pw-cat
+            /usr/bin/pw-cli
+            /usr/bin/pw-dot
+            /usr/bin/pw-dsdplay
+            /usr/bin/pw-dump
+            /usr/bin/pw-link
+            /usr/bin/pw-loopback
+            /usr/bin/pw-metadata
+            /usr/bin/pw-mididump
+            /usr/bin/pw-midiplay
+            /usr/bin/pw-midirecord
+            /usr/bin/pw-mon
+            /usr/bin/pw-play
+            /usr/bin/pw-profiler
+            /usr/bin/pw-record
+            /usr/bin/pw-reserve
+            /usr/bin/pw-top
+        ]
+
+        # An array of rejected paths.
+        #access.rejected = [ ]
+
+        # An array of paths with restricted access.
+        #access.restricted = [ ]
+
+        # Anything not in the above lists gets assigned the
+        # access.force permission.
+        #access.force = flatpak
     }
+}
 
-    # Makes a factory for wrapping nodes in an adapter with a
-    # converter and resampler.
-    { name = libpipewire-module-adapter }
-
-    # Makes a factory for creating links between ports.
-    { name = libpipewire-module-link-factory }
+# Makes a factory for wrapping nodes in an adapter with a
+# converter and resampler.
+{ name = libpipewire-module-adapter }
 
-    # Provides factories to make session manager objects.
-    { name = libpipewire-module-session-manager }
+# Makes a factory for creating links between ports.
+{ name = libpipewire-module-link-factory }
 
-    # Use libcanberra to play X11 Bell
-    #{ name = libpipewire-module-x11-bell
-    #  args = {
-    #      #sink.name = "@DEFAULT_SINK@"
-    #      #sample.name = "bell-window-system"
-    #      #x11.display = null
-    #      #x11.xauthority = null
-    #  }
-    #}
+# Provides factories to make session manager objects.
+{ name = libpipewire-module-session-manager }
 ]
 
 context.objects = [
-    #{ factory = <factory-name>
-    #    [ args  = { <key> = <value> ... } ]
-    #    [ flags = [ [ nofail ] ]
-    #}
-    #
-    # Creates an object from a PipeWire factory with the given parameters.
-    # If nofail is given, errors are ignored (and no object is created).
-    #
-    #{ factory = spa-node-factory   args = { factory.name = videotestsrc node.name = videotestsrc Spa:Pod:Object:Param:Props:patternType = 1 } }
-    #{ factory = spa-device-factory args = { factory.name = api.jack.device foo=bar } flags = [ nofail ] }
-    #{ factory = spa-device-factory args = { factory.name = api.alsa.enum.udev } }
-    #{ factory = spa-node-factory   args = { factory.name = api.alsa.seq.bridge node.name = Internal-MIDI-Bridge } }
-    #{ factory = adapter            args = { factory.name = audiotestsrc node.name = my-test } }
-    #{ factory = spa-node-factory   args = { factory.name = api.vulkan.compute.source node.name = my-compute-source } }
-
-    # A default dummy driver. This handles nodes marked with the "node.always-driver"
-    # property when no other driver is currently active. JACK clients need this.
-    { factory = spa-node-factory
-        args = {
-            factory.name    = support.node.driver
-            node.name       = Dummy-Driver
-            node.group      = pipewire.dummy
-            priority.driver = 20000
-        }
+{ factory = spa-node-factory
+    args = {
+        factory.name    = support.node.driver
+        node.name       = Dummy-Driver
+        node.group      = pipewire.dummy
+        priority.driver = 20000
     }
-    { factory = spa-node-factory
-        args = {
-            factory.name    = support.node.driver
-            node.name       = Freewheel-Driver
-            priority.driver = 19000
-            node.group      = pipewire.freewheel
-            node.freewheel  = true
-        }
+}
+{ factory = spa-node-factory
+    args = {
+        factory.name    = support.node.driver
+        node.name       = Freewheel-Driver
+        priority.driver = 19000
+        node.group      = pipewire.freewheel
+        node.freewheel  = true
     }
-    # This creates a new Source node. It will have input ports
-    # that you can link, to provide audio for this source.
-    #{ factory = adapter
-    #    args = {
-    #        factory.name     = support.null-audio-sink
-    #        node.name        = "my-mic"
-    #        node.description = "Microphone"
-    #        media.class      = "Audio/Source/Virtual"
-    #        audio.position   = "FL,FR"
-    #    }
-    #}
+}
 
-    # This creates a single PCM source device for the given
-    # alsa device path hw:0. You can change source to sink
-    # to make a sink in the same way.
-    #{ factory = adapter
-    #    args = {
-    #        factory.name           = api.alsa.pcm.source
-    #        node.name              = "alsa-source"
-    #        node.description       = "PCM Source"
-    #        media.class            = "Audio/Source"
-    #        api.alsa.path          = "hw:0"
-    #        api.alsa.period-size   = 1024
-    #        api.alsa.headroom      = 0
-    #        api.alsa.disable-mmap  = false
-    #        api.alsa.disable-batch = false
-    #        audio.format           = "S16LE"
-    #        audio.rate             = 48000
-    #        audio.channels         = 2
-    #        audio.position         = "FL,FR"
-    #    }
-    #}
+{ factory = adapter
+    args = {
+        factory.name           = "api.alsa.pcm.sink"
+        factory.mode           = "merge"
+        node.name              = "alsa-sink"
+        node.description       = "PCM Sink"
+        media.class            = "Audio/Sink"
+        api.alsa.path          = "hw:0,0"
+        api.alsa.period-size   = 1024
+        api.alsa.headroom      = 0
+        audio.format           = "S16LE"
+        audio.rate             = 48000
+        audio.channels         = 2
+        audio.position         = "FL,FR"
+        device.class           = "sound"
+        #priority.driver        = 25000
+        #node.autoconnect       = true
+        #node.suspend-on-idle   = false
+        #node.pause-on-idle     = false
+        #node.driver            = false
+        #node.passive           = in
+        #api.alsa.disable-mmap  = true
+        #api.alsa.disable-batch = true
+        #resample.disable       = true
+        #channelmix.disable     = true  alsa-driver cannot disable channelmix!
+    }
+}
+
+{ factory = adapter
+    args = {
+        factory.name           = api.alsa.pcm.source
+        node.name              = "alsa-source"
+        node.description       = "PCM Source"
+        media.class            = "Audio/Source"
+        api.alsa.path          = "hw:0,1"
+        api.alsa.period-size   = 1024
+        api.alsa.headroom      = 0
+        api.alsa.disable-mmap  = false
+        api.alsa.disable-batch = false
+        audio.format           = "S16LE"
+        audio.rate             = 48000
+        audio.channels         = 2
+        audio.position         = "FL,FR"
+        #priority.driver        = 25000
+    }
+}
 ]
 
 context.exec = [
-    #{ path = <program-name> [ args = "<arguments>" ] }
-    #
-    # Execute the given program with arguments.
-    #
-    # You can optionally start the session manager here,
-    # but it is better to start it as a systemd service.
-    # Run the session manager with -h for options.
-    #
-    @sm_comment@{ path = "@session_manager_path@" args = "@session_manager_args@" }
-    #
-    # You can optionally start the pulseaudio-server here as well
-    # but it is better to start it as a systemd service.
-    # It can be interesting to start another daemon here that listens
-    # on another address with the -a option (eg. -a tcp:4713).
-    #
-    @pulse_comment@{ path = "@pipewire_path@" args = "-c pipewire-pulse.conf" }
+    # Start Session Manager: WirePlumber
+    { path = "/usr/bin/wireplumber" }
 ]
