--- a/src/pcm/pcm_dmix.c
+++ b/src/pcm/pcm_dmix.c
@@ -161,7 +161,10 @@ static void mix_areas(snd_pcm_direct_t *dmix,
 	unsigned int src_step, dst_step;
 	unsigned int chn, dchn, channels, sample_size;
 	mix_areas_t *do_mix_areas;
-	
+	//add tmp area to store data after mixer, then copy the buffer to dma buffer.
+	snd_pcm_channel_area_t * tmp_area;
+	tmp_area = (snd_pcm_channel_area_t *)calloc(1, sizeof(snd_pcm_channel_area_t *));
+
 	channels = dmix->channels;
 	switch (dmix->shmptr->s.format) {
 	case SND_PCM_FORMAT_S16_LE:
@@ -187,13 +190,23 @@ static void mix_areas(snd_pcm_direct_t *dmix,
 		do_mix_areas = (mix_areas_t *)dmix->u.dmix.mix_areas_u8;
 		break;
 	default:
+		if (tmp_area) {
+			free(tmp_area);
+			tmp_area = NULL;
+		}
 		return;
 	}
+
+	tmp_area->addr = (void *)calloc(1, size * dmix->channels * sample_size);
+	tmp_area->first = dst_areas->first;
+	tmp_area->step = dst_areas->step;
+
 	if (dmix->interleaved) {
 		/*
 		 * process all areas in one loop
 		 * it optimizes the memory accesses for this case
 		 */
+		if (channels <= 4) {
 		do_mix_areas(size * channels,
 			     (unsigned char *)dst_areas[0].addr + sample_size * dst_ofs * channels,
 			     (unsigned char *)src_areas[0].addr + sample_size * src_ofs * channels,
@@ -201,8 +214,71 @@ static void mix_areas(snd_pcm_direct_t *dmix,
 			     sample_size,
 			     sample_size,
 			     sizeof(signed int));
+		} else if (channels == 6 || channels == 8) {
+			do_mix_areas(size * channels,
+			     tmp_area->addr,
+			     (unsigned char *)src_areas[0].addr + sample_size * src_ofs * channels,
+			     dmix->u.dmix.sum_buffer + dst_ofs * channels,
+			     sample_size,
+			     sample_size,
+			     sizeof(signed int));
+
+			//patch for realtek dma mmap buffer rebuild--begin
+			unsigned int frame_num = 0;
+			unsigned long offset_bytes = 0;
+			unsigned long buf_offset = 0;
+			unsigned int bits_per_byte = 8;
+			/*channel count for first hardware dma transfer*/
+			unsigned int first_channels = 4;
+			/*channel count for second hardware dma transfer*/
+			unsigned int last_channels = channels - first_channels;
+
+			//printf("dst addr:%x, src addr:%x, frames:%d, dst_ofs:%d\n", dst_areas->addr, tmp_area->addr, size, dst_ofs);
+			snd_pcm_sframes_t frames_to_write = size;
+
+			/*write first 4 channel data to DMA buf*/
+			for ( ; frame_num < frames_to_write; ++frame_num ) {
+				memcpy((char*)dst_areas->addr + dst_ofs*channels*sample_size + offset_bytes, (char*)tmp_area->addr + buf_offset, first_channels * sample_size);
+
+				offset_bytes += first_channels * sample_size;
+				buf_offset += channels * sample_size;
+			}
+
+			frame_num = 0;
+			offset_bytes = size * first_channels * sample_size;
+			buf_offset = first_channels * sample_size;
+
+			/*write last 2/4 channel data to DMA buf*/
+			for ( ; frame_num < frames_to_write; ++frame_num ) {
+				memcpy((char*)dst_areas->addr + dst_ofs*channels*sample_size + offset_bytes, (char*)tmp_area->addr + buf_offset, last_channels * sample_size);
+
+				offset_bytes += last_channels * sample_size;
+				buf_offset += channels * sample_size;
+			}
+
+			//patch for realtek dma mmap buffer rebuild--end
+		}
+
+		if (tmp_area->addr) {
+			free(tmp_area->addr);
+			tmp_area->addr = NULL;
+		}
+		if (tmp_area) {
+			free(tmp_area);
+			tmp_area = NULL;
+		}
 		return;
 	}
+
+	if (tmp_area->addr) {
+		free(tmp_area->addr);
+		tmp_area->addr = NULL;
+	}
+	if (tmp_area) {
+		free(tmp_area);
+		tmp_area = NULL;
+	}
+
 	for (chn = 0; chn < channels; chn++) {
 		dchn = dmix->bindings ? dmix->bindings[chn] : chn;
 		if (dchn >= dmix->shmptr->s.channels)
